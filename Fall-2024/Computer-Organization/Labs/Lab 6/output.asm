.ORIG x5000
ST R0, OUTPUT_R0
ST R1, OUTPUT_R1
ST R3, OUTPUT_R3
ST R4, OUTPUT_R4
ST R5, OUTPUT_R5
ST R7, OUTPUT_R7

LD R5, OUTPUT_ASCII

ST R0, OUTPUT_TEMP_RESULT

;TENS;
AND R1, R1, #0
AND R3, R3, #0
ADD R3, R3, #-10
AND R4, R4, #0
ADD R4, R4, #10

OUTPUT_CALC_TENS
    ADD R0, R0, R3
    BRn EXIT_OUTPUT_CALC_TENS
    ADD R1, R1, #1
    ADD R0, R0, #0
    BRzp OUTPUT_CALC_TENS
EXIT_OUTPUT_CALC_TENS

ADD R0, R0, R4
ST R0, OUTPUT_TEMP_RESULT

; If ten's digit equals zero, don't print digit
ADD R1, R1, #0
BRz SKIP_TENS_PRINT

ADD R0, R5, R1
OUT

SKIP_TENS_PRINT
LD R0, OUTPUT_TEMP_RESULT

AND R1, R1, #0
AND R3, R3, #0
ADD R3, R3, #-1
AND R4, R4, #0
ADD R4, R4, #1

;ONES;
OUTPUT_CALC_ONES
    ADD R0, R0, R3
    BRn EXIT_OUTPUT_CALC_ONES
    ADD R1, R1, #1
    ADD R0, R0, #0
    BRzp OUTPUT_CALC_ONES
EXIT_OUTPUT_CALC_ONES

ADD R0, R0, R4
ST R0, OUTPUT_TEMP_RESULT
ADD R0, R5, R1
OUT
LD R0, OUTPUT_TEMP_RESULT

LD R0, OUTPUT_R0
LD R1, OUTPUT_R1
LD R3, OUTPUT_R3
LD R4, OUTPUT_R4
LD R5, OUTPUT_R5
LD R7, OUTPUT_R7
RET

LD R7, OUTPUT_R7
RET
OUTPUT_TEMP_RESULT .BLKW #1
OUTPUT_HUN .FILL #100
OUTPUT_ASCII .FILL x30
OUTPUT_R0 .BLKW #1
OUTPUT_R1 .BLKW #1
OUTPUT_R3 .BLKW #1
OUTPUT_R4 .BLKW #1
OUTPUT_R5 .BLKW #1
OUTPUT_R7 .BLKW #1
.END